USE AT YOUR OWN RISK - this is a demonstration of setting up zrok/ziti

acquire a LE wildcard cert i'm using:

docker run -it --rm \
  --name certbot \
  -v "/etc/letsencrypt:/etc/letsencrypt" \
  -v "/var/lib/letsencrypt:/var/lib/letsencrypt" \
  certbot/certbot certonly \
    -d '*.zititv.demo.openziti.org' \
    --manual \
    --preferred-challenges dns \
    --email ____@____ \
    --keep \
    --agree-tos 

export ZITI_HOME=/opt/openziti/selfhosted.zrok
export WILDCARD_DNS="zititv.demo.openziti.org"
#export EXTERNAL_DNS="ec2-3-142-245-63.us-east-2.compute.amazonaws.com"

export ZITI_PWD=________
export ZROK_ADMIN_PWD=________

export ZITI_CTRL_PORT=8441
export ZITI_ROUTER_PORT=8442
export ZROK_CTRL_PORT=8444
export ZROK_FRONTEND_PORT=8445
export ZROK_API_PORT=8446

export EXTERNAL_IP="$(curl -s eth0.me)"       
export ZITI_CTRL_EDGE_IP_OVERRIDE="${EXTERNAL_IP}"
export ZITI_ROUTER_IP_OVERRIDE="${EXTERNAL_IP}"
export ZITI_CTRL_EDGE_ADVERTISED_ADDRESS="${EXTERNAL_DNS:-${EXTERNAL_IP}}"
export ZITI_ROUTER_ADVERTISED_ADDRESS="${EXTERNAL_DNS:-${EXTERNAL_IP}}"

export LE_CHAIN="/etc/letsencrypt/live/${WILDCARD_DNS}/fullchain.pem"
export LE_KEY="/etc/letsencrypt/live/${WILDCARD_DNS}/privkey.pem"

export ZITI_CTRL_LISTENER_PORT=${ZITI_CTRL_PORT}
export ZITI_CTRL_ADVERTISED_PORT=${ZITI_CTRL_PORT}
export ZITI_CTRL_EDGE_ADVERTISED_PORT=${ZITI_CTRL_PORT}
export ZITI_ROUTER_LISTENER_BIND_PORT=${ZITI_ROUTER_PORT}
export ZITI_EDGE_ROUTER_PORT=${ZITI_ROUTER_PORT}
export ZITI_CONTROLLER_IP_OVERRIDE="${EXTERNAL_IP}"

export ZITI_ROUTER_ADVERTISED_HOST="${EXTERNAL_DNS}"
export ZITI_PKI_ALT_SERVER_CERT=${LE_CHAIN}
export ZITI_PKI_ALT_SERVER_KEY=${LE_KEY}

export ZROK_API_ADDRESS="api.${WILDCARD_DNS}"
export ZROK_ROOT=$ZITI_HOME/zrok
export ZROK_API_ENDPOINT=http://localhost:${ZROK_CTRL_PORT}






systemctl stop zrok-controller
systemctl stop zrok-frontend
systemctl stop ziti-router
systemctl stop ziti-controller
killall ziti
killall zrok

rm -r /opt/openziti/selfhosted.zrok/
rm -r /home/ubuntu/.zrok/
rm -r /root/.zrok/


export ENV_VAR_FILE="/home/ubuntu/git/dovholuknf/openziti-scripts/notes/new.env"
source $ENV_VAR_FILE
mkdir -p $ZITI_HOME


echo "sourcing ziti-cli-functions.sh"
ZITI_CLI_FUNC="https://get.openziti.io/quick/ziti-cli-functions.sh"
source /dev/stdin <<< "$(wget -qO- $ZITI_CLI_FUNC)";
unsetZitiEnv
source $ENV_VAR_FILE

echo "Running expressInstall"
expressInstall





createControllerSystemdFile
createRouterSystemdFile "${ZITI_ROUTER_NAME}"

cp "${ZITI_HOME}/${ZITI_NETWORK}.service" /etc/systemd/system/ziti-controller.service
cp "${ZITI_HOME}/${ZITI_ROUTER_NAME}.service" /etc/systemd/system/ziti-router.service
systemctl daemon-reload
systemctl enable --now ziti-controller
systemctl enable --now ziti-router
systemctl -q status ziti-controller --lines=0 --no-pager
systemctl -q status ziti-router --lines=0 --no-pager

curl -s https://letsencrypt.org/certs/lets-encrypt-r3.pem >> $ZITI_HOME/pki/cas.pem
curl -s https://letsencrypt.org/certs/isrgrootx1.pem >> $ZITI_HOME/pki/cas.pem

systemctl restart ziti-controller
systemctl restart ziti-router
systemctl -q status ziti-controller --lines=0 --no-pager
systemctl -q status ziti-router --lines=0 --no-pager


echo "sourcing env file at $ZITI_HOME/$(hostname).env"
source $ENV_VAR_FILE
source $ZITI_HOME/$(hostname).env
ziti edge login -u $ZITI_USER -p $ZITI_PWD -y $ZITI_EDGE_CTRL_ADVERTISED_HOST_PORT


advertised_host_port="${ZITI_CTRL_EDGE_ADVERTISED_ADDRESS}:${ZITI_CTRL_EDGE_ADVERTISED_PORT}"
while [[ "$(curl -w "%{http_code}" -m 1 -s -k -o /dev/null https://"${advertised_host_port}"/edge/client/v1/version)" != "200" ]]; do
  echo "waiting for https://${advertised_host_port}"
  sleep 3
done

echo "ziti controller is running..."



apt install nginx -y

tee /etc/nginx/nginx.conf > /dev/null << HERE
events {
}
http {
  server {
      listen              ${ZROK_API_PORT} ssl;
      server_name         ${ZROK_API_ADDRESS};
      ssl_certificate     ${LE_CHAIN};
      ssl_certificate_key ${LE_KEY};
      ssl_protocols       TLSv1.2;
      ssl_ciphers         HIGH:!aNULL:!MD5;

      location / {
        proxy_pass      http://127.0.0.1:${ZROK_CTRL_PORT};
        error_log       /var/log/nginx/zrok-controller.log;
      }
  }

  server {
      listen              ${ZROK_API_PORT} ssl;
      server_name         *.${WILDCARD_DNS};
      ssl_certificate     ${LE_CHAIN};
      ssl_certificate_key ${LE_KEY};
      ssl_protocols       TLSv1.2;
      ssl_ciphers         HIGH:!aNULL:!MD5;

      location / {
        proxy_pass       http://127.0.0.1:${ZROK_FRONTEND_PORT};
        proxy_set_header Host \$host;
        error_log        /var/log/nginx/zrok-frontend.log;
        proxy_busy_buffers_size   512k;
        proxy_buffers    4 512k;
        proxy_buffer_size   256k;
      }
  }

  server {
      listen              8448 ssl;
      server_name         ${ZROK_API_ADDRESS};
      ssl_certificate     ${LE_CHAIN};
      ssl_certificate_key ${LE_KEY};
      ssl_protocols       TLSv1.2;
      ssl_ciphers         HIGH:!aNULL:!MD5;

      location / {
        proxy_pass       http://127.0.0.1:8000;
        proxy_set_header Host \$host;
        error_log        /var/log/nginx/docker-test.log;
        proxy_busy_buffers_size   512k;
        proxy_buffers    4 512k;
        proxy_buffer_size   256k;
      }
  }
}
HERE

nginx -t
systemctl restart nginx







if [ -z "${ZROK_ADMIN_TOKEN}" ]; then
    ZROK_ADMIN_TOKEN="${ZITI_PWD}"
	echo "ZROK_ADMIN_TOKEN was not set. using the ZITI_PWD"
fi

mkdir -p $ZROK_ROOT/bin
ZROK_BINARY=$(which zrok)

cat > $ZROK_ROOT/ctrl.yml << HERE
v: 3
admin:
  secrets:
    -               $ZROK_ADMIN_TOKEN
  tou_link:         '<a href="https://openziti.io" target="_">Terms and Conditions</a>'
endpoint:
  host:             0.0.0.0
  port:             $ZROK_CTRL_PORT
store:
  path:             $ZROK_ROOT/zrok.db
  type:             sqlite3
ziti:
  api_endpoint:     "https://ctrl.${WILDCARD_DNS}:${ZITI_CTRL_EDGE_ADVERTISED_PORT}"
  username:         "${ZITI_USER}"
  password:         "${ZITI_PWD}"
invites:
  invites_open:     true
passwords:
  length:           4
  require_capital:  false
  require_numeric:  true
  require_special:  false
  valid_special_characters: "\\"\\\\\`'''~!@#$%^&*()[],./"
HERE











${ZROK_BINARY} admin bootstrap $ZROK_ROOT/ctrl.yml 2>&1 | tee /tmp/zrok.admin.bootstrap.output

ZROK_FRONTEND_ID=$(grep "zrok admin create" /tmp/zrok.admin.bootstrap.output | cut -d ";" -f1 | cut -d \' -f2)
echo "using ZROK_FRONTEND_ID: ${ZROK_FRONTEND_ID}"



tee /etc/systemd/system/zrok-controller.service > /dev/null << HERE
[Unit]
Description=zrok-controller
After=network.target

[Service]
User=root
WorkingDirectory=$ZROK_ROOT
ExecStart="$ZROK_BINARY" controller "$ZROK_ROOT/ctrl.yml"
Restart=always
RestartSec=2
LimitNOFILE=65535

[Install]
WantedBy=multi-user.target
HERE

systemctl daemon-reload
systemctl enable --now zrok-controller

echo "wating for ${ZROK_API_ENDPOINT}"
while [[ "$(curl -w "%{http_code}" -m 1 -s -k -o /dev/null ${ZROK_API_ENDPOINT})" != "200" ]]; do
  echo "waiting for ${ZROK_API_ENDPOINT}"
  sleep 1
done

${ZROK_BINARY} config set apiEndpoint ${ZROK_API_ENDPOINT}

${ZROK_BINARY} admin create frontend ${ZROK_FRONTEND_ID} public https://{token}.${WILDCARD_DNS}:${ZROK_API_PORT}


cat > $ZROK_ROOT/http-frontend.yml << HERE
v: 3
host_match: ${WILDCARD_DNS}
address: 0.0.0.0:${ZROK_FRONTEND_PORT}
HERE

tee /etc/systemd/system/zrok-frontend.service > /dev/null << HERE
[Unit]
Description=zrok-frontend
After=network.target

[Service]
User=root
WorkingDirectory=$ZROK_ROOT
ExecStart="$ZROK_BINARY" access public "$ZROK_ROOT/http-frontend.yml"
Restart=always
RestartSec=2
LimitNOFILE=65535

[Install]
WantedBy=multi-user.target
HERE

systemctl daemon-reload
systemctl enable --now zrok-frontend


echo " "
echo "You should now be able to issue a \`zrok invite\` command to invite yourself to your self-hosted zrok"
echo " "
echo "  zrok invite"
echo " "
echo "You probably won't have an email server configured so after running zrok invite, you'll need to"
echo "inspect the zrok-controller log for the token to use. In a separate terminal look at the log using"
echo "journalctl:"
echo ""
echo "  journalctl --no-pager -u zrok-controller -n 100 | grep \"has registration token\""
echo " "
echo " "
echo "After you get the invite token, you can then go to:"
echo ""
echo "  https://${ZROK_API_ADDRESS}:${ZROK_NGINX_PORT}/register/\${invite-token-here}"
echo " "
echo "Inviting the first zrok user now!"
echo " "

zrok invite
sleep 1

echo " "
echo "now register by going to: https://${ZROK_API_ADDRESS}:${ZROK_API_PORT}/register/$(journalctl --no-pager -u zrok-controller -n 100 | grep "has registration token" | tail -1 | cut -d ":" -f4-100 | jq .msg | cut -d \' -f4)"
echo " "

